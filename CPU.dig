<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>Register</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>PC</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-1640" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>Clock</string>
        </entry>
      </elementAttributes>
      <pos x="-1700" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>PCPlusFour</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>PC:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity PCPlusFour is
    Port (
        PC        : in  STD_LOGIC_VECTOR(31 downto 0);
        Next_PC   : out  STD_LOGIC_VECTOR(31 downto 0)
    );
end PCPlusFour;

architecture Behavioral of PCPlusFour is
begin
	Next_PC &lt;= std_logic_vector(unsigned(PC) + 4);
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>Next_PC:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="-1720" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>VemDoEXStage</string>
        </entry>
      </elementAttributes>
      <pos x="-2120" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>PCSrc1</string>
        </entry>
      </elementAttributes>
      <pos x="-2040" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>VaiVirarInstMem</string>
        </entry>
      </elementAttributes>
      <pos x="-1480" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>PCPlusImm</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>PC:32,IMM:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity PCPlusImm is
    Port (
        PC        : in  STD_LOGIC_VECTOR(31 downto 0);
	IMM	  : in  STD_LOGIC_VECTOR(31 downto 0);
        Next_PC   : out  STD_LOGIC_VECTOR(31 downto 0)
    );
end PCPlusImm;

architecture Behavioral of PCPlusImm is
begin
	Next_PC &lt;= std_logic_vector(unsigned(PC) + unsigned(IMM));
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>Next_PC:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="-840" y="60"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>CheckEqual</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>Rs1:32,Rs2:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity CheckEqual is
    Port (
        Rs1        : in  STD_LOGIC_VECTOR(31 downto 0);
	Rs2	  : in  STD_LOGIC_VECTOR(31 downto 0);
        IsEqual   : out  STD_LOGIC
    );
end CheckEqual;

architecture Behavioral of CheckEqual is
begin
	IsEqual &lt;= &apos;1&apos; when Rs1 = Rs2 else &apos;0&apos;;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>IsEqual</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="-560" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ImmGen</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>Instruction:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ImmGen is
    Port (
        Instruction	: in  STD_LOGIC_VECTOR(31 downto 0);
        Immediate   	: out  STD_LOGIC_VECTOR(31 downto 0)
    );
end ImmGen;

architecture Behavioral of ImmGen is

signal opcode : STD_LOGIC_VECTOR(6 downto 0);

begin

opcode &lt;= Instruction(6 downto 0);

process(opcode)
begin
    case opcode is

        when &quot;0110011&quot; =&gt;
		-- R type
		Immediate &lt;= (others =&gt; &apos;0&apos;);

        when &quot;0010011&quot; | &quot;1100111&quot; | &quot;0000011&quot; =&gt;
		-- I type
		Immediate &lt;= (others =&gt; Instruction (31));
		Immediate (11 downto 0) &lt;= Instruction (31 downto 20);

        when &quot;0010111&quot; | &quot;0110111&quot; =&gt; 
            	-- U type
            	Immediate &lt;= (others =&gt; &apos;0&apos;);
		Immediate (31 downto 12) &lt;= Instruction (31 downto 12);

        when &quot;1100011&quot; =&gt; 
            	-- SB type
		Immediate &lt;= (others =&gt; Instruction (31));
		Immediate (0) &lt;= &apos;0&apos;;
		Immediate (11) &lt;= Instruction (7);
		Immediate (4 downto 1) &lt;= Instruction (11 downto 8);
		Immediate (10 downto 5) &lt;= Instruction (30 downto 25);

        when &quot;1101111&quot; =&gt; 
            	-- UJ type
		Immediate &lt;= (others =&gt; Instruction (31));
		Immediate (0) &lt;= &apos;0&apos;;
		Immediate (11) &lt;= Instruction (20);
		Immediate (19 downto 12) &lt;= Instruction (19 downto 12);
		Immediate (10 downto 1) &lt;= Instruction (30 downto 21);
            	
        when &quot;0100011&quot; =&gt; 
           	 -- S type
            	Immediate &lt;= (others =&gt; Instruction (31));
		Immediate (11 downto 5) &lt;= Instruction (31 downto 25);
		Immediate (4 downto 0) &lt;= Instruction (11 downto 7);

        when others =&gt;
            	Immediate &lt;= (others =&gt; &apos;0&apos;);

    end case;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>Immediate:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>11</int>
        </entry>
      </elementAttributes>
      <pos x="-860" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>PCWrite</string>
        </entry>
      </elementAttributes>
      <pos x="-1660" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>BitIgualdade</string>
        </entry>
      </elementAttributes>
      <pos x="-420" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>IF_ID</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>rst,clk,IF_ID_WRITE,IF_ID_flush,PC_in:32,inst_in:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity IF_ID is
    Port ( 
	rst     	: in  STD_LOGIC; 
        clk		: in  STD_LOGIC;

	IF_ID_WRITE	: in STD_LOGIC;
	IF_ID_flush	: in STD_LOGIC;
        PC_in		: in  STD_LOGIC_VECTOR(31 downto 0);
        inst_in		: in  STD_LOGIC_VECTOR(31 downto 0);

	PC_out		: out STD_LOGIC_VECTOR(31 downto 0);
	inst_out	: out STD_LOGIC_VECTOR(31 downto 0);
	rd		: out STD_LOGIC_VECTOR(4 downto 0);
        rs1		: out STD_LOGIC_VECTOR(4 downto 0);
        rs2		: out STD_LOGIC_VECTOR(4 downto 0);
	func3		: out STD_LOGIC_VECTOR(2 downto 0);
	func7		: out STD_LOGIC_VECTOR(6 downto 0)

    );
end IF_ID;

architecture Behavioral of IF_ID is

signal s_dado : STD_LOGIC_VECTOR(31 downto 0);

begin

process(clk,rst)
begin
	if rst = &apos;1&apos; then
		s_dado &lt;= (others =&gt; &apos;0&apos;);
        elsif rising_edge(clk) and IF_ID_WRITE=&apos;0&apos; then
		if IF_ID_flush=&apos;1&apos; then
			PC_out &lt;= (others =&gt; &apos;0&apos;);
			inst_out &lt;= (others =&gt; &apos;0&apos;);
		else
			PC_out &lt;= PC_in;
            		inst_out &lt;= inst_in;
		end if;
	end if;
end process;

rs1 &lt;= inst_out(19 downto 15);
rs2 &lt;= inst_out(24 downto 20);
rd &lt;= inst_out(11 downto 7);
func3 &lt;= inst_out(14 downto 12);
func7 &lt;= inst_out(31 downto 25);

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>PC_out:32,inst_out:32,rd:5,rs1:5,rs2:5,func3:3,func7:7</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="-1420" y="140"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ID_EX</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>rst,clk,EXSignals_in:5,MEMSignals_in:2,WBSignals_in:2,PC_in:32,rs1_data_in:32,rs2_data_in:32,rd_in:5,rs1_in:5,rs2_in:5,func3_in:3,func7_in:7,immediate_in:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ID_EX is
    Port ( 
	rst     	: in  STD_LOGIC; 
        clk		: in  STD_LOGIC;

        EXSignals_in	: in  STD_LOGIC_VECTOR(4 downto 0);
        MEMSignals_in	: in  STD_LOGIC_VECTOR(1 downto 0);
        WBSignals_in	: in  STD_LOGIC_VECTOR(1 downto 0);

	PC_in		: in STD_LOGIC_VECTOR(31 downto 0);
        rs1_data_in	: in  STD_LOGIC_VECTOR(31 downto 0);
        rs2_data_in	: in  STD_LOGIC_VECTOR(31 downto 0);
        rd_in		: in  STD_LOGIC_VECTOR(4 downto 0);
        rs1_in		: in  STD_LOGIC_VECTOR(4 downto 0);
        rs2_in		: in  STD_LOGIC_VECTOR(4 downto 0);
	func3_in	: in STD_LOGIC_VECTOR(2 downto 0);
	func7_in	: in STD_LOGIC_VECTOR(6 downto 0);
        immediate_in	: in  STD_LOGIC_VECTOR(31 downto 0);

        rs1_data_out	: out STD_LOGIC_VECTOR(31 downto 0);
        rs2_data_out	: out STD_LOGIC_VECTOR(31 downto 0);
	PC_out		: out STD_LOGIC_VECTOR(31 downto 0);
	immediate_out	: out STD_LOGIC_VECTOR(31 downto 0);
	ALUSrcA		: out STD_LOGIC_VECTOR(1 downto 0);
	ALUSrcB		: out STD_LOGIC;
	func3_out	: out STD_LOGIC_VECTOR(2 downto 0);
	func7_out	: out STD_LOGIC_VECTOR(6 downto 0);
	ALUOp		: out STD_LOGIC_VECTOR(1 downto 0);
	rs1_out		: out STD_LOGIC_VECTOR(4 downto 0);
	rs2_out		: out STD_LOGIC_VECTOR(4 downto 0);
	rd_out		: out STD_LOGIC_VECTOR(4 downto 0);
	MEMSignals_out	: out STD_LOGIC_VECTOR(1 downto 0);
	WBSignals_out	: out STD_LOGIC_VECTOR(1 downto 0)
    );
end ID_EX;

architecture Behavioral of ID_EX is

signal s_dado : STD_LOGIC_VECTOR(31 downto 0);

begin

process(clk,rst)
begin
	if rst = &apos;1&apos; then
		rs1_out &lt;= (others =&gt; &apos;0&apos;);
		rs2_out &lt;= (others =&gt; &apos;0&apos;);
		rd_out &lt;= (others =&gt; &apos;0&apos;);
		rs1_data_out &lt;= (others =&gt; &apos;0&apos;);
		rs2_data_out &lt;= (others =&gt; &apos;0&apos;);
		func3_out &lt;= (others =&gt; &apos;0&apos;);
		func7_out &lt;= (others =&gt; &apos;0&apos;);
		immediate_out &lt;= (others =&gt; &apos;0&apos;);
		ALUSrcA &lt;= (others =&gt; &apos;0&apos;);
		ALUSrcB &lt;= &apos;0&apos;;
		ALUOp &lt;= (others =&gt; &apos;0&apos;);
		MEMSignals_out &lt;= (others =&gt; &apos;0&apos;);
		WBSignals_out &lt;= (others =&gt; &apos;0&apos;);
        elsif rising_edge(clk) then
		rs1_out &lt;= rs1_in;
		rs2_out &lt;= rs2_in;
		rd_out &lt;= rd_in;
		rs1_data_out &lt;= rs1_data_in;
		rs2_data_out &lt;= rs2_data_in;
		func3_out &lt;= func3_in;
		func7_out &lt;= func7_in;
		immediate_out &lt;= immediate_in;
		ALUSrcA &lt;= EXSignals_in(1 downto 0);
		ALUSrcB &lt;= EXSignals_in(2);
		ALUOp &lt;= EXSignals_in(4 downto 3);
		MEMSignals_out &lt;= MEMSignals_in;
		WBSignals_out &lt;= WBSignals_in;
	end if;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>rs1_data_out:32,rs2_data_out:32,PC_out:32,immediate_out:32,ALUSrcA:2,ALUSrcB,func3_out:3,func7_out:7,ALUOp:2,rs1_out:5,rs2_out:5,rd_out:5,MEMSignals_out:2,WBSignals_out:2</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="-100" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>EX_MEM</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>rst,clk,rs2_data_in:32,ALUoutput_in:32,rd_in:5,MEMSignals_in:2,WBSignals_in:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity EX_MEM is
    Port ( 
	rst     	: in  STD_LOGIC; 
        clk		: in  STD_LOGIC;

        rs2_data_in	: in  STD_LOGIC_VECTOR(31 downto 0); --for store instruction
	ALUoutput_in	: in  STD_LOGIC_VECTOR(31 downto 0);
        rd_in		: in  STD_LOGIC_VECTOR(4 downto 0);

	MEMSignals_in	: in STD_LOGIC_VECTOR(1 downto 0);
	WBSignals_in	: in STD_LOGIC_VECTOR(1 downto 0);

        rs2_data_out	: out STD_LOGIC_VECTOR(31 downto 0);
	MemRead		: out STD_LOGIC;
	MemWrite	: out STD_LOGIC;
	ALUoutput_out	: out  STD_LOGIC_VECTOR(31 downto 0);
	rd_out		: out STD_LOGIC_VECTOR(4 downto 0);
	WBSignals_out	: out STD_LOGIC_VECTOR(1 downto 0)
    );
end EX_MEM;

architecture Behavioral of EX_MEM is

signal s_dado : STD_LOGIC_VECTOR(31 downto 0);

begin

process(clk,rst)
begin
	if rst = &apos;1&apos; then
		rd_out &lt;= (others =&gt; &apos;0&apos;);
		rs2_data_out &lt;= (others =&gt; &apos;0&apos;);
		ALUoutput_out &lt;= (others =&gt; &apos;0&apos;);
		MemRead &lt;= &apos;0&apos;;
		MemWrite &lt;= &apos;0&apos;;
		WBSignals_out &lt;= (others =&gt; &apos;0&apos;);
        elsif rising_edge(clk) then
		rd_out &lt;= rd_in;
		rs2_data_out &lt;= rs2_data_in;
		ALUoutput_out &lt;= ALUoutput_in;
		MemRead &lt;= MEMSignals_in(0);
		MemWrite &lt;= MEMSignals_in(1);
		WBSignals_out &lt;= WBSignals_in;
	end if;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>rs2_data_out:32,MemRead,MemWrite,ALUoutput_out:32,rd_out:5,WBSignals_out:2</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="900" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>EX_MEM</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>rst,clk,DataFromMem_in:32,ALUoutput_in:32,rd_in:5,WBSignals_in:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity EX_MEM is
    Port ( 
	rst     	: in  STD_LOGIC; 
        clk		: in  STD_LOGIC;

        DataFromMem_in	: in  STD_LOGIC_VECTOR(31 downto 0);
	ALUoutput_in	: in  STD_LOGIC_VECTOR(31 downto 0);
        rd_in		: in  STD_LOGIC_VECTOR(4 downto 0);

	WBSignals_in	: in STD_LOGIC_VECTOR(1 downto 0);

	rd_out		: out STD_LOGIC_VECTOR(4 downto 0);
        DataFromMem_out	: out STD_LOGIC_VECTOR(31 downto 0);
	ALUoutput_out	: out  STD_LOGIC_VECTOR(31 downto 0);

	MemToReg 	: out STD_LOGIC;
	RegWrite 	: out STD_LOGIC
    );
end EX_MEM;

architecture Behavioral of EX_MEM is

signal s_dado : STD_LOGIC_VECTOR(31 downto 0);

begin

process(clk,rst)
begin
	if rst = &apos;1&apos; then
		rd_out &lt;= (others =&gt; &apos;0&apos;);
		DataFromMem_out &lt;= (others =&gt; &apos;0&apos;);
		ALUoutput_out &lt;= (others =&gt; &apos;0&apos;);
		MemToReg &lt;= &apos;0&apos;;
		RegWrite &lt;= &apos;0&apos;;
        elsif rising_edge(clk) then
		rd_out &lt;= rd_in;
		DataFromMem_out &lt;= DataFromMem_in;
		ALUoutput_out &lt;= ALUoutput_in;
		MemToReg &lt;= WBSignals_in(0);
		RegWrite &lt;= WBSignals_in(1);
	end if;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>rd_out:5,DataFromMem_out:32,ALUoutput_out:32,MemToReg,RegWrite</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="1900" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>RegisterFile</elementName>
      <elementAttributes>
        <entry>
          <string>AddrBits</string>
          <int>5</int>
        </entry>
        <entry>
          <string>Label</string>
          <string>RegFile</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-820" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Mux_4para1</string>
        </entry>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>D0:2,D1:2,D2:2,D3:2,SEL:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Mux_4para1 is
    Port (
        D0  : in  std_logic_vector(1 downto 0); -- Entrada de dados 0
        D1  : in  std_logic_vector(1 downto 0); -- Entrada de dados 1
        D2  : in  std_logic_vector(1 downto 0); -- Entrada de dados 2
        D3  : in  std_logic_vector(1 downto 0); -- Entrada de dados 3
        SEL : in  std_logic_vector(1 downto 0); -- Linha de seleção de 2 bits
        Y   : out std_logic_vector(1 downto 0)  -- Saída de dados
    );
end Mux_4para1;

architecture Behavorial of Mux_4para1 is
begin
    process(D0, D1, D2, D3, SEL)
    begin
        case SEL is
            when &quot;00&quot;   =&gt; Y &lt;= D0;
            when &quot;01&quot;   =&gt; Y &lt;= D1;
            when &quot;10&quot;   =&gt; Y &lt;= D2;
            when others =&gt; Y &lt;= D3; -- Cobre o caso &quot;11&quot; e outros possíveis (U, X, etc.)
        end case;
    end process;

end Behavorial;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>Y:2</string>
        </entry>
      </elementAttributes>
      <pos x="400" y="-120"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ALUSrcA</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>Rs1:32,PC:32,SEL:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ALUSrcA is
    Port (
        Rs1  	: in  std_logic_vector(31 downto 0); -- Entrada de dados 0
        PC  	: in  std_logic_vector(31 downto 0); -- Entrada de dados 1
        SEL 	: in  std_logic_vector(1 downto 0); -- Linha de seleção de 2 bits
        A   	: out std_logic_vector(31 downto 0)  -- Saída de dados
    );
end ALUSrcA;

architecture Behavorial of ALUSrcA is
begin
    process(Rs1, PC, SEL)
    begin
        case SEL is
            when &quot;00&quot;   =&gt; A &lt;= Rs1;
            when &quot;01&quot;   =&gt; A &lt;= PC;
            when others =&gt; A &lt;= (others =&gt; &apos;0&apos;); -- &quot;10&quot; e sinais incorretos
        end case;
    end process;

end Behavorial;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>A:32</string>
        </entry>
      </elementAttributes>
      <pos x="480" y="140"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ALUSrcB</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>Rs2:32,imm:32,SEL</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ALUSrcB is
    Port (
        Rs2  	: in  std_logic_vector(31 downto 0); -- Entrada de dados 0
        imm  	: in  std_logic_vector(31 downto 0); -- Entrada de dados 1
        SEL 	: in  std_logic; -- Linha de seleção
        B   	: out std_logic_vector(31 downto 0)  -- Saída de dados
    );
end ALUSrcB;

architecture Behavorial of ALUSrcB is
begin
    process(Rs2, imm, SEL)
    begin
        case SEL is
            when &apos;0&apos;   =&gt; B &lt;= Rs2;
            when others =&gt; B &lt;= imm; -- &apos;1&apos;
        end case;
    end process;

end Behavorial;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>B:32</string>
        </entry>
      </elementAttributes>
      <pos x="480" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>PCSrc</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>PCplus4:32,ID_result:32,EX_result:32,S1,S2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity PCSrc is
    Port (
        PCplus4 	: in  std_logic_vector(31 downto 0); -- Entrada de dados 0
        ID_result  	: in  std_logic_vector(31 downto 0); -- Entrada de dados 1
        EX_result	: in  std_logic_vector(31 downto 0); -- Entrada de dados 2
        S1 		: in  std_logic; -- Linha de seleção
        S2 		: in  std_logic; -- Linha de seleção
        NextPC 		: out std_logic_vector(31 downto 0)  -- Saída de dados
    );
end PCSrc;

architecture Behavorial of PCSrc is
signal SEL : std_logic_vector(1 downto 0);
begin
SEL &lt;= S1&amp;S2;
    process(PCplus4, ID_result, EX_result, S1, S2)
    begin
        case SEL is
            when &quot;00&quot;   =&gt; NextPC &lt;= PCplus4;
            when &quot;01&quot;   =&gt; NextPC &lt;= ID_result;
            when &quot;10&quot;   =&gt; NextPC &lt;= EX_result;
            when others =&gt; NextPC &lt;= (others =&gt; &apos;0&apos;); -- valores incorretos
        end case;
    end process;

end Behavorial;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>NextPC:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>9</int>
        </entry>
      </elementAttributes>
      <pos x="-1920" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>PCSrc2</string>
        </entry>
      </elementAttributes>
      <pos x="-2040" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>MemToReg</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>MemOutput:32,ALUOutput:32,SEL</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity MemToReg is
    Port (
        MemOutput	: in  std_logic_vector(31 downto 0); -- Entrada de dados 0
        ALUOutput	: in  std_logic_vector(31 downto 0); -- Entrada de dados 1
        SEL		: in  std_logic; -- Linha de seleção
        DataOut		: out std_logic_vector(31 downto 0)  -- Saída de dados
    );
end MemToReg;

architecture Behavorial of MemToReg is
begin
    process(MemOutput, ALUOutput, SEL)
    begin
        case SEL is
            when &apos;0&apos;   =&gt; DataOut &lt;= MemOutput;
            when &apos;1&apos;   =&gt; DataOut &lt;= ALUOutput;
            when others =&gt; DataOut &lt;= (others =&gt; &apos;0&apos;); -- Cobre o caso &quot;11&quot; e outros possíveis (U, X, etc.)
        end case;
    end process;

end Behavorial;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>DataOut:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>9</int>
        </entry>
      </elementAttributes>
      <pos x="2300" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Mux_ControlSignals</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>EXSignals_in:5,MEMSignals_in:2,WBSignals_in:2,stall</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Mux_ControlSignals is
    Port (
        EXSignals_in	: in  STD_LOGIC_VECTOR(4 downto 0);
        MEMSignals_in	: in  STD_LOGIC_VECTOR(1 downto 0);
        WBSignals_in	: in  STD_LOGIC_VECTOR(1 downto 0);
        stall		: in  std_logic;
        EXSignals_out	: out STD_LOGIC_VECTOR(4 downto 0);
        MEMSignals_out	: out STD_LOGIC_VECTOR(1 downto 0);
        WBSignals_out	: out STD_LOGIC_VECTOR(1 downto 0)
    );
end Mux_ControlSignals;

architecture Behavorial of Mux_ControlSignals is
begin
    process(EXSignals_in, MEMSignals_in, WBSignals_in, stall)
    begin
        case stall is
            when &apos;0&apos; =&gt; 
		EXSignals_out &lt;= EXSignals_in;
		MEMSignals_out &lt;= MEMSignals_in;
		WBSignals_out &lt;= WBSignals_in;
            when others =&gt;
		EXSignals_out &lt;= (others =&gt; &apos;0&apos;);
		MEMSignals_out &lt;= (others =&gt; &apos;0&apos;);
		WBSignals_out &lt;= (others =&gt; &apos;0&apos;);
        end case;
    end process;

end Behavorial;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>EXSignals_out:5,MEMSignals_out:2,WBSignals_out:2</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="-540" y="40"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="-1660" y="320"/>
      <p2 x="-1640" y="320"/>
    </wire>
    <wire>
      <p1 x="-1740" y="320"/>
      <p2 x="-1720" y="320"/>
    </wire>
    <wire>
      <p1 x="-160" y="320"/>
      <p2 x="-100" y="320"/>
    </wire>
    <wire>
      <p1 x="-1020" y="320"/>
      <p2 x="-820" y="320"/>
    </wire>
    <wire>
      <p1 x="-580" y="320"/>
      <p2 x="-240" y="320"/>
    </wire>
    <wire>
      <p1 x="200" y="320"/>
      <p2 x="260" y="320"/>
    </wire>
    <wire>
      <p1 x="-1980" y="320"/>
      <p2 x="-1920" y="320"/>
    </wire>
    <wire>
      <p1 x="220" y="640"/>
      <p2 x="880" y="640"/>
    </wire>
    <wire>
      <p1 x="1220" y="640"/>
      <p2 x="1880" y="640"/>
    </wire>
    <wire>
      <p1 x="-1980" y="0"/>
      <p2 x="-680" y="0"/>
    </wire>
    <wire>
      <p1 x="-1540" y="260"/>
      <p2 x="-1480" y="260"/>
    </wire>
    <wire>
      <p1 x="1200" y="260"/>
      <p2 x="1240" y="260"/>
    </wire>
    <wire>
      <p1 x="1860" y="260"/>
      <p2 x="1900" y="260"/>
    </wire>
    <wire>
      <p1 x="-460" y="260"/>
      <p2 x="-420" y="260"/>
    </wire>
    <wire>
      <p1 x="-740" y="260"/>
      <p2 x="-580" y="260"/>
    </wire>
    <wire>
      <p1 x="-1120" y="260"/>
      <p2 x="-1080" y="260"/>
    </wire>
    <wire>
      <p1 x="-220" y="260"/>
      <p2 x="-100" y="260"/>
    </wire>
    <wire>
      <p1 x="840" y="260"/>
      <p2 x="900" y="260"/>
    </wire>
    <wire>
      <p1 x="2200" y="260"/>
      <p2 x="2220" y="260"/>
    </wire>
    <wire>
      <p1 x="-880" y="260"/>
      <p2 x="-820" y="260"/>
    </wire>
    <wire>
      <p1 x="-1040" y="580"/>
      <p2 x="-180" y="580"/>
    </wire>
    <wire>
      <p1 x="-1120" y="200"/>
      <p2 x="-1020" y="200"/>
    </wire>
    <wire>
      <p1 x="-580" y="200"/>
      <p2 x="-240" y="200"/>
    </wire>
    <wire>
      <p1 x="-220" y="200"/>
      <p2 x="-100" y="200"/>
    </wire>
    <wire>
      <p1 x="2200" y="200"/>
      <p2 x="2300" y="200"/>
    </wire>
    <wire>
      <p1 x="-2040" y="520"/>
      <p2 x="-1940" y="520"/>
    </wire>
    <wire>
      <p1 x="-960" y="460"/>
      <p2 x="-620" y="460"/>
    </wire>
    <wire>
      <p1 x="-2040" y="460"/>
      <p2 x="-1960" y="460"/>
    </wire>
    <wire>
      <p1 x="-1120" y="140"/>
      <p2 x="-980" y="140"/>
    </wire>
    <wire>
      <p1 x="-160" y="140"/>
      <p2 x="-100" y="140"/>
    </wire>
    <wire>
      <p1 x="-980" y="140"/>
      <p2 x="-220" y="140"/>
    </wire>
    <wire>
      <p1 x="-700" y="80"/>
      <p2 x="-680" y="80"/>
    </wire>
    <wire>
      <p1 x="-240" y="80"/>
      <p2 x="-200" y="80"/>
    </wire>
    <wire>
      <p1 x="200" y="340"/>
      <p2 x="240" y="340"/>
    </wire>
    <wire>
      <p1 x="-140" y="340"/>
      <p2 x="-100" y="340"/>
    </wire>
    <wire>
      <p1 x="-1040" y="340"/>
      <p2 x="-820" y="340"/>
    </wire>
    <wire>
      <p1 x="-1960" y="340"/>
      <p2 x="-1920" y="340"/>
    </wire>
    <wire>
      <p1 x="-2120" y="340"/>
      <p2 x="-1980" y="340"/>
    </wire>
    <wire>
      <p1 x="-1720" y="280"/>
      <p2 x="-1640" y="280"/>
    </wire>
    <wire>
      <p1 x="860" y="280"/>
      <p2 x="900" y="280"/>
    </wire>
    <wire>
      <p1 x="1200" y="280"/>
      <p2 x="1220" y="280"/>
    </wire>
    <wire>
      <p1 x="1880" y="280"/>
      <p2 x="1900" y="280"/>
    </wire>
    <wire>
      <p1 x="-580" y="280"/>
      <p2 x="-560" y="280"/>
    </wire>
    <wire>
      <p1 x="-200" y="280"/>
      <p2 x="-100" y="280"/>
    </wire>
    <wire>
      <p1 x="-1940" y="280"/>
      <p2 x="-1920" y="280"/>
    </wire>
    <wire>
      <p1 x="-900" y="280"/>
      <p2 x="-820" y="280"/>
    </wire>
    <wire>
      <p1 x="1260" y="600"/>
      <p2 x="1840" y="600"/>
    </wire>
    <wire>
      <p1 x="-1060" y="600"/>
      <p2 x="-160" y="600"/>
    </wire>
    <wire>
      <p1 x="260" y="600"/>
      <p2 x="840" y="600"/>
    </wire>
    <wire>
      <p1 x="-1740" y="220"/>
      <p2 x="-1540" y="220"/>
    </wire>
    <wire>
      <p1 x="-1120" y="220"/>
      <p2 x="-1040" y="220"/>
    </wire>
    <wire>
      <p1 x="-240" y="220"/>
      <p2 x="-100" y="220"/>
    </wire>
    <wire>
      <p1 x="2200" y="220"/>
      <p2 x="2300" y="220"/>
    </wire>
    <wire>
      <p1 x="2480" y="220"/>
      <p2 x="2520" y="220"/>
    </wire>
    <wire>
      <p1 x="-1540" y="220"/>
      <p2 x="-1420" y="220"/>
    </wire>
    <wire>
      <p1 x="-1000" y="540"/>
      <p2 x="-220" y="540"/>
    </wire>
    <wire>
      <p1 x="-1740" y="160"/>
      <p2 x="-1720" y="160"/>
    </wire>
    <wire>
      <p1 x="-1580" y="160"/>
      <p2 x="-1560" y="160"/>
    </wire>
    <wire>
      <p1 x="-1120" y="160"/>
      <p2 x="-980" y="160"/>
    </wire>
    <wire>
      <p1 x="-180" y="160"/>
      <p2 x="-100" y="160"/>
    </wire>
    <wire>
      <p1 x="-920" y="800"/>
      <p2 x="2520" y="800"/>
    </wire>
    <wire>
      <p1 x="-1940" y="100"/>
      <p2 x="-1560" y="100"/>
    </wire>
    <wire>
      <p1 x="-960" y="100"/>
      <p2 x="-840" y="100"/>
    </wire>
    <wire>
      <p1 x="-880" y="740"/>
      <p2 x="2220" y="740"/>
    </wire>
    <wire>
      <p1 x="200" y="360"/>
      <p2 x="220" y="360"/>
    </wire>
    <wire>
      <p1 x="-120" y="360"/>
      <p2 x="-100" y="360"/>
    </wire>
    <wire>
      <p1 x="-1940" y="360"/>
      <p2 x="-1920" y="360"/>
    </wire>
    <wire>
      <p1 x="-240" y="40"/>
      <p2 x="-160" y="40"/>
    </wire>
    <wire>
      <p1 x="-1580" y="300"/>
      <p2 x="-1540" y="300"/>
    </wire>
    <wire>
      <p1 x="-1700" y="300"/>
      <p2 x="-1640" y="300"/>
    </wire>
    <wire>
      <p1 x="880" y="300"/>
      <p2 x="900" y="300"/>
    </wire>
    <wire>
      <p1 x="-180" y="300"/>
      <p2 x="-100" y="300"/>
    </wire>
    <wire>
      <p1 x="-1980" y="300"/>
      <p2 x="-1920" y="300"/>
    </wire>
    <wire>
      <p1 x="240" y="620"/>
      <p2 x="860" y="620"/>
    </wire>
    <wire>
      <p1 x="1240" y="620"/>
      <p2 x="1860" y="620"/>
    </wire>
    <wire>
      <p1 x="-1080" y="620"/>
      <p2 x="-140" y="620"/>
    </wire>
    <wire>
      <p1 x="1840" y="240"/>
      <p2 x="1900" y="240"/>
    </wire>
    <wire>
      <p1 x="1200" y="240"/>
      <p2 x="1260" y="240"/>
    </wire>
    <wire>
      <p1 x="-740" y="240"/>
      <p2 x="-580" y="240"/>
    </wire>
    <wire>
      <p1 x="-1120" y="240"/>
      <p2 x="-1060" y="240"/>
    </wire>
    <wire>
      <p1 x="-240" y="240"/>
      <p2 x="-100" y="240"/>
    </wire>
    <wire>
      <p1 x="2200" y="240"/>
      <p2 x="2300" y="240"/>
    </wire>
    <wire>
      <p1 x="-920" y="240"/>
      <p2 x="-820" y="240"/>
    </wire>
    <wire>
      <p1 x="-580" y="240"/>
      <p2 x="-560" y="240"/>
    </wire>
    <wire>
      <p1 x="-1020" y="560"/>
      <p2 x="-200" y="560"/>
    </wire>
    <wire>
      <p1 x="-980" y="500"/>
      <p2 x="-860" y="500"/>
    </wire>
    <wire>
      <p1 x="-640" y="500"/>
      <p2 x="-620" y="500"/>
    </wire>
    <wire>
      <p1 x="-620" y="500"/>
      <p2 x="-120" y="500"/>
    </wire>
    <wire>
      <p1 x="-1120" y="180"/>
      <p2 x="-1000" y="180"/>
    </wire>
    <wire>
      <p1 x="-200" y="180"/>
      <p2 x="-100" y="180"/>
    </wire>
    <wire>
      <p1 x="2200" y="180"/>
      <p2 x="2240" y="180"/>
    </wire>
    <wire>
      <p1 x="-900" y="760"/>
      <p2 x="2240" y="760"/>
    </wire>
    <wire>
      <p1 x="-980" y="60"/>
      <p2 x="-840" y="60"/>
    </wire>
    <wire>
      <p1 x="-240" y="60"/>
      <p2 x="-180" y="60"/>
    </wire>
    <wire>
      <p1 x="2240" y="180"/>
      <p2 x="2240" y="760"/>
    </wire>
    <wire>
      <p1 x="-1540" y="220"/>
      <p2 x="-1540" y="260"/>
    </wire>
    <wire>
      <p1 x="-1540" y="260"/>
      <p2 x="-1540" y="300"/>
    </wire>
    <wire>
      <p1 x="-580" y="260"/>
      <p2 x="-580" y="280"/>
    </wire>
    <wire>
      <p1 x="-580" y="200"/>
      <p2 x="-580" y="240"/>
    </wire>
    <wire>
      <p1 x="-580" y="280"/>
      <p2 x="-580" y="320"/>
    </wire>
    <wire>
      <p1 x="-900" y="280"/>
      <p2 x="-900" y="760"/>
    </wire>
    <wire>
      <p1 x="1220" y="280"/>
      <p2 x="1220" y="640"/>
    </wire>
    <wire>
      <p1 x="1860" y="260"/>
      <p2 x="1860" y="620"/>
    </wire>
    <wire>
      <p1 x="260" y="320"/>
      <p2 x="260" y="600"/>
    </wire>
    <wire>
      <p1 x="-1480" y="260"/>
      <p2 x="-1480" y="280"/>
    </wire>
    <wire>
      <p1 x="-200" y="280"/>
      <p2 x="-200" y="560"/>
    </wire>
    <wire>
      <p1 x="-200" y="80"/>
      <p2 x="-200" y="180"/>
    </wire>
    <wire>
      <p1 x="840" y="260"/>
      <p2 x="840" y="600"/>
    </wire>
    <wire>
      <p1 x="-1740" y="160"/>
      <p2 x="-1740" y="220"/>
    </wire>
    <wire>
      <p1 x="-140" y="340"/>
      <p2 x="-140" y="620"/>
    </wire>
    <wire>
      <p1 x="-1040" y="220"/>
      <p2 x="-1040" y="340"/>
    </wire>
    <wire>
      <p1 x="-1040" y="340"/>
      <p2 x="-1040" y="580"/>
    </wire>
    <wire>
      <p1 x="-980" y="160"/>
      <p2 x="-980" y="500"/>
    </wire>
    <wire>
      <p1 x="-980" y="60"/>
      <p2 x="-980" y="140"/>
    </wire>
    <wire>
      <p1 x="-1940" y="360"/>
      <p2 x="-1940" y="520"/>
    </wire>
    <wire>
      <p1 x="-1940" y="100"/>
      <p2 x="-1940" y="280"/>
    </wire>
    <wire>
      <p1 x="-1560" y="100"/>
      <p2 x="-1560" y="160"/>
    </wire>
    <wire>
      <p1 x="-920" y="240"/>
      <p2 x="-920" y="800"/>
    </wire>
    <wire>
      <p1 x="1880" y="280"/>
      <p2 x="1880" y="640"/>
    </wire>
    <wire>
      <p1 x="1240" y="260"/>
      <p2 x="1240" y="620"/>
    </wire>
    <wire>
      <p1 x="2520" y="220"/>
      <p2 x="2520" y="800"/>
    </wire>
    <wire>
      <p1 x="-220" y="260"/>
      <p2 x="-220" y="540"/>
    </wire>
    <wire>
      <p1 x="-220" y="140"/>
      <p2 x="-220" y="200"/>
    </wire>
    <wire>
      <p1 x="220" y="360"/>
      <p2 x="220" y="640"/>
    </wire>
    <wire>
      <p1 x="860" y="280"/>
      <p2 x="860" y="620"/>
    </wire>
    <wire>
      <p1 x="-160" y="320"/>
      <p2 x="-160" y="600"/>
    </wire>
    <wire>
      <p1 x="-160" y="40"/>
      <p2 x="-160" y="140"/>
    </wire>
    <wire>
      <p1 x="-1700" y="300"/>
      <p2 x="-1700" y="400"/>
    </wire>
    <wire>
      <p1 x="-1060" y="240"/>
      <p2 x="-1060" y="600"/>
    </wire>
    <wire>
      <p1 x="-1000" y="180"/>
      <p2 x="-1000" y="540"/>
    </wire>
    <wire>
      <p1 x="-1960" y="340"/>
      <p2 x="-1960" y="460"/>
    </wire>
    <wire>
      <p1 x="-680" y="0"/>
      <p2 x="-680" y="80"/>
    </wire>
    <wire>
      <p1 x="-620" y="460"/>
      <p2 x="-620" y="500"/>
    </wire>
    <wire>
      <p1 x="1260" y="240"/>
      <p2 x="1260" y="600"/>
    </wire>
    <wire>
      <p1 x="2220" y="260"/>
      <p2 x="2220" y="740"/>
    </wire>
    <wire>
      <p1 x="-240" y="240"/>
      <p2 x="-240" y="320"/>
    </wire>
    <wire>
      <p1 x="-240" y="200"/>
      <p2 x="-240" y="220"/>
    </wire>
    <wire>
      <p1 x="-880" y="260"/>
      <p2 x="-880" y="740"/>
    </wire>
    <wire>
      <p1 x="880" y="300"/>
      <p2 x="880" y="640"/>
    </wire>
    <wire>
      <p1 x="240" y="340"/>
      <p2 x="240" y="620"/>
    </wire>
    <wire>
      <p1 x="1840" y="240"/>
      <p2 x="1840" y="600"/>
    </wire>
    <wire>
      <p1 x="-180" y="300"/>
      <p2 x="-180" y="580"/>
    </wire>
    <wire>
      <p1 x="-180" y="60"/>
      <p2 x="-180" y="160"/>
    </wire>
    <wire>
      <p1 x="-1720" y="280"/>
      <p2 x="-1720" y="320"/>
    </wire>
    <wire>
      <p1 x="-1080" y="260"/>
      <p2 x="-1080" y="620"/>
    </wire>
    <wire>
      <p1 x="-120" y="360"/>
      <p2 x="-120" y="500"/>
    </wire>
    <wire>
      <p1 x="-1660" y="320"/>
      <p2 x="-1660" y="380"/>
    </wire>
    <wire>
      <p1 x="-1020" y="200"/>
      <p2 x="-1020" y="320"/>
    </wire>
    <wire>
      <p1 x="-1020" y="320"/>
      <p2 x="-1020" y="560"/>
    </wire>
    <wire>
      <p1 x="-1980" y="320"/>
      <p2 x="-1980" y="340"/>
    </wire>
    <wire>
      <p1 x="-1980" y="0"/>
      <p2 x="-1980" y="300"/>
    </wire>
    <wire>
      <p1 x="-960" y="100"/>
      <p2 x="-960" y="460"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>